{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "4697605839482939008"
    }
  },
  "parameters": {
    "solutionName": {
      "type": "string",
      "defaultValue": "clientadvisor",
      "minLength": 3,
      "maxLength": 20,
      "metadata": {
        "description": "Required. A unique prefix for all resources in this deployment. This should be 3-20 characters long:"
      }
    },
    "existingLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Existing Log Analytics Workspace Resource ID"
      }
    },
    "azureExistingAIProjectResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Use this parameter to use an existing AI project resource ID"
      }
    },
    "cosmosLocation": {
      "type": "string",
      "defaultValue": "eastus2",
      "metadata": {
        "description": "Optional. CosmosDB Location"
      }
    },
    "deploymentType": {
      "type": "string",
      "defaultValue": "GlobalStandard",
      "allowedValues": [
        "Standard",
        "GlobalStandard"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Optional. GPT model deployment type:"
      }
    },
    "gptModelName": {
      "type": "string",
      "defaultValue": "gpt-4o-mini",
      "allowedValues": [
        "gpt-4o-mini"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Optional. Name of the GPT model to deploy:"
      }
    },
    "azureOpenaiAPIVersion": {
      "type": "string",
      "defaultValue": "2025-04-01-preview",
      "metadata": {
        "description": "Optional. API version for the Azure OpenAI service."
      }
    },
    "gptDeploymentCapacity": {
      "type": "int",
      "defaultValue": 200,
      "minValue": 10,
      "metadata": {
        "description": "Optional. Capacity of the GPT deployment:"
      }
    },
    "embeddingModel": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002",
      "allowedValues": [
        "text-embedding-ada-002"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Optional. Name of the Text Embedding model to deploy:"
      }
    },
    "embeddingDeploymentCapacity": {
      "type": "int",
      "defaultValue": 80,
      "minValue": 10,
      "metadata": {
        "description": "Optional. Capacity of the Embedding Model deployment"
      }
    },
    "imageTag": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "The Docker image tag to use for the application deployment."
      }
    },
    "aiDeploymentsLocation": {
      "type": "string",
      "allowedValues": [
        "australiaeast",
        "eastus",
        "eastus2",
        "francecentral",
        "japaneast",
        "swedencentral",
        "uksouth",
        "westus",
        "westus3"
      ],
      "metadata": {
        "azd": {
          "type": "location",
          "usageName": [
            "OpenAI.GlobalStandard.gpt-4o-mini,200",
            "OpenAI.GlobalStandard.text-embedding-ada-002,80"
          ]
        },
        "description": "Rquired. Location for AI Foundry deployment. This is the location where the AI Foundry resources will be deployed."
      }
    },
    "AZURE_LOCATION": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Set this if you want to deploy to a different region than the resource group. Otherwise, it will use the resource group location by default."
      }
    },
    "solutionUniqueToken": {
      "type": "string",
      "defaultValue": "[substring(uniqueString(subscription().id, resourceGroup().name, parameters('solutionName')), 0, 5)]",
      "maxLength": 5,
      "metadata": {
        "description": "Optional. A unique token for the solution. This is used to ensure resource names are unique for global resources. Defaults to a 5-character substring of the unique string generated from the subscription ID, resource group name, and solution name."
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
        },
        "description": "Optional. The tags to apply to all deployed Azure resources."
      },
      "defaultValue": {}
    }
  },
  "variables": {
    "solutionLocation": "[if(empty(parameters('AZURE_LOCATION')), resourceGroup().location, parameters('AZURE_LOCATION'))]",
    "solutionSuffix": "[toLower(trim(replace(replace(replace(replace(replace(replace(format('{0}{1}', parameters('solutionName'), parameters('solutionUniqueToken')), '-', ''), '_', ''), '.', ''), '/', ''), ' ', ''), '*', '')))]",
    "hostingPlanName": "[format('asp-{0}', variables('solutionSuffix'))]",
    "websiteName": "[format('app-{0}', variables('solutionSuffix'))]",
    "appEnvironment": "Prod",
    "azureSearchIndex": "transcripts_index",
    "azureSearchUseSemanticSearch": "True",
    "azureSearchSemanticSearchConfig": "my-semantic-config",
    "azureSearchTopK": "5",
    "azureSearchContentColumns": "content",
    "azureSearchFilenameColumn": "chunk_id",
    "azureSearchTitleColumn": "client_id",
    "azureSearchUrlColumn": "sourceurl",
    "azureOpenAITemperature": "0",
    "azureOpenAITopP": "1",
    "azureOpenAIMaxTokens": "1000",
    "azureOpenAIStopSequence": "\n",
    "azureOpenAISystemMessage": "You are a helpful Wealth Advisor assistant",
    "azureOpenAIStream": "True",
    "azureSearchQueryType": "simple",
    "azureSearchVectorFields": "contentVector",
    "azureSearchPermittedGroupsField": "",
    "azureSearchStrictness": "3",
    "azureSearchEnableInDomain": "False",
    "azureCosmosDbEnableFeedback": "True",
    "useInternalStream": "True",
    "useAIProjectClientFlag": "False",
    "functionAppSqlPrompt": "Generate a valid T-SQL query to find {query} for tables and columns provided below:\r\n   1. Table: Clients\r\n   Columns: ClientId, Client, Email, Occupation, MaritalStatus, Dependents\r\n   2. Table: InvestmentGoals\r\n   Columns: ClientId, InvestmentGoal\r\n   3. Table: Assets\r\n   Columns: ClientId, AssetDate, Investment, ROI, Revenue, AssetType\r\n   4. Table: ClientSummaries\r\n   Columns: ClientId, ClientSummary\r\n   5. Table: InvestmentGoalsDetails\r\n   Columns: ClientId, InvestmentGoal, TargetAmount, Contribution\r\n   6. Table: Retirement\r\n   Columns: ClientId, StatusDate, RetirementGoalProgress, EducationGoalProgress\r\n   7. Table: ClientMeetings\r\n   Columns: ClientId, ConversationId, Title, StartTime, EndTime, Advisor, ClientEmail\r\n   Always use the Investment column from the Assets table as the value.\r\n   Assets table has snapshots of values by date. Do not add numbers across different dates for total values.\r\n   Do not use client name in filters.\r\n   Do not include assets values unless asked for.\r\n   ALWAYS use ClientId = {clientid} in the query filter.\r\n   ALWAYS select Client Name (Column: Client) in the query.\r\n   Query filters are IMPORTANT. Add filters like AssetType, AssetDate, etc. if needed.\r\n   When answering scheduling or time-based meeting questions, always use the StartTime column from ClientMeetings table. Use correct logic to return the most recent past meeting (last/previous) or the nearest future meeting (next/upcoming), and ensure only StartTime column is used for meeting timing comparisons.\r\n   Only return the generated SQL query. Do not return anything else.",
    "functionAppCallTranscriptSystemPrompt": "You are an assistant who supports wealth advisors in preparing for client meetings. \r\n  You have access to the clientâ€™s past meeting call transcripts. \r\n  When answering questions, especially summary requests, provide a detailed and structured response that includes key topics, concerns, decisions, and trends. \r\n  If no data is available, state 'No relevant data found for previous meetings.",
    "functionAppStreamTextSystemPrompt": "The currently selected client's name is '{SelectedClientName}'. Treat any case-insensitive or partial mention as referring to this client.\r\n  If the user mentions no name, assume they are asking about '{SelectedClientName}'.\r\n  If the user references a name that clearly differs from '{SelectedClientName}' or comparing with other clients, respond only with: 'Please only ask questions about the selected client or select another client.' Otherwise, provide thorough answers for every question using only data from SQL or call transcripts.'\r\n  If no data is found, respond with 'No data found for that client.' Remove any client identifiers from the final response.\r\n  Always send clientId as '{client_id}'.",
    "aiFoundryAiServicesAiProjectResourceName": "[format('proj-{0}', variables('solutionSuffix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/tags",
      "apiVersion": "2021-04-01",
      "name": "default",
      "properties": {
        "tags": "[shallowMerge(createArray(parameters('tags'), createObject('TemplateName', 'Client Advisor')))]"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_managed_identity",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[variables('solutionSuffix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "miName": {
            "value": "[format('id-{0}', variables('solutionSuffix'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "6639330323573416008"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 15,
              "metadata": {
                "description": "Required. Name of the solution."
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Deployment location for the solution."
              }
            },
            "miName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the managed identity."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('miName')]",
              "location": "[parameters('solutionLocation')]",
              "tags": "[shallowMerge(createArray(parameters('tags'), createObject('app', parameters('solutionName'), 'location', parameters('solutionLocation'))))]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}-webapp', parameters('miName'))]",
              "location": "[parameters('solutionLocation')]",
              "tags": "[shallowMerge(createArray(parameters('tags'), createObject('app', parameters('solutionName'), 'location', parameters('solutionLocation'))))]"
            }
          ],
          "outputs": {
            "managedIdentityOutput": {
              "type": "object",
              "metadata": {
                "description": "Details of the managed identity resource."
              },
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName'))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miName')), '2023-01-31').clientId]",
                "name": "[parameters('miName')]"
              }
            },
            "managedIdentityWebAppOutput": {
              "type": "object",
              "metadata": {
                "description": "Details of the managed identity for the web app."
              },
              "value": {
                "id": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-webapp', parameters('miName')))]",
                "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-webapp', parameters('miName'))), '2023-01-31').principalId]",
                "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-webapp', parameters('miName'))), '2023-01-31').clientId]",
                "name": "[format('{0}-webapp', parameters('miName'))]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_keyvault",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[variables('solutionSuffix')]"
          },
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "kvName": {
            "value": "[format('kv-{0}', variables('solutionSuffix'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12303448646842336311"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "metadata": {
                "description": "Required. Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Solution Location"
              }
            },
            "utc": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "Optional. Current UTC timestamp."
              }
            },
            "kvName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Azure Key Vault."
              }
            },
            "createMode": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Optional. Specifies the create mode for the resource."
              }
            },
            "enableForDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enabled For Deployment. Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
              }
            },
            "enableForDiskEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enabled For Disk Encryption. Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
              }
            },
            "enableForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enabled For Template Deployment. Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "enableRBACAuthorization": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable RBAC Authorization. Property that controls how data actions are authorized."
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "Optional. Soft Delete Retention in Days. softDelete data retention days. It accepts >=7 and <=90."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "enabled",
              "allowedValues": [
                "enabled",
                "disabled"
              ],
              "metadata": {
                "description": "Optional. Public Network Access, Property to specify whether the vault will accept traffic from public internet."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "Optional. SKU"
              }
            },
            "managedIdentityObjectId": {
              "type": "string",
              "metadata": {
                "description": "Required. Object ID of the managed identity."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            }
          },
          "variables": {
            "vaultUri": "[format('https://{0}.vault.azure.net/', parameters('kvName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('kvName')]",
              "location": "[parameters('solutionLocation')]",
              "tags": "[shallowMerge(createArray(parameters('tags'), createObject('app', parameters('solutionName'), 'location', parameters('solutionLocation'))))]",
              "properties": {
                "accessPolicies": [
                  {
                    "objectId": "[parameters('managedIdentityObjectId')]",
                    "permissions": {
                      "certificates": [
                        "all"
                      ],
                      "keys": [
                        "all"
                      ],
                      "secrets": [
                        "all"
                      ],
                      "storage": [
                        "all"
                      ]
                    },
                    "tenantId": "[subscription().tenantId]"
                  }
                ],
                "createMode": "[parameters('createMode')]",
                "enabledForDeployment": "[parameters('enableForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enableForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enableForTemplateDeployment')]",
                "enableRbacAuthorization": "[parameters('enableRBACAuthorization')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "provisioningState": "RegisteringDns",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "sku": {
                  "family": "A",
                  "name": "[parameters('sku')]"
                },
                "tenantId": "[subscription().tenantId]",
                "vaultUri": "[variables('vaultUri')]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Key Vault."
              },
              "value": "[parameters('kvName')]"
            },
            "keyvaultId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the Key Vault."
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_ai_foundry",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionName": {
            "value": "[variables('solutionSuffix')]"
          },
          "solutionLocation": {
            "value": "[parameters('aiDeploymentsLocation')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "deploymentType": {
            "value": "[parameters('deploymentType')]"
          },
          "gptModelName": {
            "value": "[parameters('gptModelName')]"
          },
          "azureOpenaiAPIVersion": {
            "value": "[parameters('azureOpenaiAPIVersion')]"
          },
          "gptDeploymentCapacity": {
            "value": "[parameters('gptDeploymentCapacity')]"
          },
          "embeddingModel": {
            "value": "[parameters('embeddingModel')]"
          },
          "embeddingDeploymentCapacity": {
            "value": "[parameters('embeddingDeploymentCapacity')]"
          },
          "existingLogAnalyticsWorkspaceId": {
            "value": "[parameters('existingLogAnalyticsWorkspaceId')]"
          },
          "azureExistingAIProjectResourceId": {
            "value": "[parameters('azureExistingAIProjectResourceId')]"
          },
          "aiFoundryAiServicesAiProjectResourceName": {
            "value": "[variables('aiFoundryAiServicesAiProjectResourceName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "651349839825117270"
            }
          },
          "parameters": {
            "solutionName": {
              "type": "string",
              "metadata": {
                "description": "Required. Solution Name"
              }
            },
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Solution Location"
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Required. Contains Name of KeyVault."
              }
            },
            "deploymentType": {
              "type": "string",
              "metadata": {
                "description": "Required. Indicates the type of Deployment."
              }
            },
            "gptModelName": {
              "type": "string",
              "defaultValue": "gpt-4o-mini",
              "metadata": {
                "description": "Optional. GPT Model Name"
              }
            },
            "azureOpenaiAPIVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Azure OepnAI API Version."
              }
            },
            "gptDeploymentCapacity": {
              "type": "int",
              "metadata": {
                "description": "Required. Param to get Deployment Capacity."
              }
            },
            "embeddingModel": {
              "type": "string",
              "defaultValue": "text-embedding-ada-002",
              "metadata": {
                "description": "Optional. Embedding Model."
              }
            },
            "embeddingDeploymentCapacity": {
              "type": "int",
              "defaultValue": 80,
              "metadata": {
                "description": "Optional. Info about Embedding Deployment Capacity."
              }
            },
            "existingLogAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Existing Log Analytics WorkspaceID."
              }
            },
            "azureExistingAIProjectResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Azure Existing AI Project ResourceID."
              }
            },
            "aiFoundryAiServicesAiProjectResourceName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the AI Foundry AI Project resource in Azure."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            }
          },
          "variables": {
            "aiFoundryName": "[format('aif-{0}', parameters('solutionName'))]",
            "applicationInsightsName": "[format('appi-{0}', parameters('solutionName'))]",
            "keyvaultName": "[parameters('keyVaultName')]",
            "location": "[parameters('solutionLocation')]",
            "aiProjectName": "[format('{0}-{1}', parameters('aiFoundryAiServicesAiProjectResourceName'), parameters('solutionName'))]",
            "aiProjectFriendlyName": "[variables('aiProjectName')]",
            "aiProjectDescription": "AI Foundry Project",
            "aiSearchName": "[format('srch-{0}', parameters('solutionName'))]",
            "workspaceName": "[format('log-{0}', parameters('solutionName'))]",
            "aiModelDeployments": [
              {
                "name": "[parameters('gptModelName')]",
                "model": "[parameters('gptModelName')]",
                "sku": {
                  "name": "[parameters('deploymentType')]",
                  "capacity": "[parameters('gptDeploymentCapacity')]"
                },
                "raiPolicyName": "Microsoft.Default"
              },
              {
                "name": "[parameters('embeddingModel')]",
                "model": "[parameters('embeddingModel')]",
                "sku": {
                  "name": "GlobalStandard",
                  "capacity": "[parameters('embeddingDeploymentCapacity')]"
                },
                "raiPolicyName": "Microsoft.Default"
              }
            ],
            "useExisting": "[not(empty(parameters('existingLogAnalyticsWorkspaceId')))]",
            "existingLawSubscription": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[2], '')]",
            "existingLawResourceGroup": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[4], '')]",
            "existingLawName": "[if(variables('useExisting'), split(parameters('existingLogAnalyticsWorkspaceId'), '/')[8], '')]",
            "existingOpenAIEndpoint": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), format('https://{0}.openai.azure.com/', split(parameters('azureExistingAIProjectResourceId'), '/')[8]), '')]",
            "existingProjEndpoint": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), format('https://{0}.services.ai.azure.com/api/projects/{1}', split(parameters('azureExistingAIProjectResourceId'), '/')[8], split(parameters('azureExistingAIProjectResourceId'), '/')[10]), '')]",
            "existingAIFoundryName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[8], '')]",
            "existingAIProjectName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[10], '')]",
            "existingAIServiceSubscription": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[2], '')]",
            "existingAIServicesName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[8], '')]",
            "existingAIServiceResourceGroup": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[4], '')]",
            "aiSearchConnectionName": "[format('foundry-search-connection-{0}', parameters('solutionName'))]",
            "aiAppInsightConnectionName": "[format('foundry-app-insights-connection-{0}', parameters('solutionName'))]"
          },
          "resources": [
            {
              "condition": "[not(variables('useExisting'))]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[variables('workspaceName')]",
              "location": "[variables('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "retentionInDays": 30,
                "sku": {
                  "name": "PerGB2018"
                }
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('applicationInsightsName')]",
              "location": "[variables('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled",
                "WorkspaceResourceId": "[if(variables('useExisting'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingLawSubscription'), variables('existingLawResourceGroup')), 'Microsoft.OperationalInsights/workspaces', variables('existingLawName')), resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName')))]"
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-04-01-preview",
              "name": "[variables('aiFoundryName')]",
              "location": "[variables('location')]",
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "allowProjectManagement": true,
                "customSubDomainName": "[variables('aiFoundryName')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false
              },
              "tags": "[parameters('tags')]"
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', variables('aiFoundryName'), variables('aiProjectName'))]",
              "location": "[variables('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "description": "[variables('aiProjectDescription')]",
                "displayName": "[variables('aiProjectFriendlyName')]"
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]"
              ]
            },
            {
              "copy": {
                "name": "aiFModelDeployments",
                "count": "[length(variables('aiModelDeployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('aiFoundryName'), variables('aiModelDeployments')[copyIndex()].name)]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[variables('aiModelDeployments')[copyIndex()].model]"
                },
                "raiPolicyName": "[variables('aiModelDeployments')[copyIndex()].raiPolicyName]"
              },
              "sku": {
                "name": "[variables('aiModelDeployments')[copyIndex()].sku.name]",
                "capacity": "[variables('aiModelDeployments')[copyIndex()].sku.capacity]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]"
              ]
            },
            {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2025-02-01-preview",
              "name": "[variables('aiSearchName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "basic"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "replicaCount": 1,
                "partitionCount": 1,
                "hostingMode": "default",
                "publicNetworkAccess": "enabled",
                "networkRuleSet": {
                  "ipRules": []
                },
                "encryptionWithCmk": {
                  "enforcement": "Unspecified"
                },
                "disableLocalAuth": false,
                "authOptions": {
                  "aadOrApiKey": {
                    "aadAuthFailureMode": "http403"
                  }
                },
                "semanticSearch": "free"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', variables('aiFoundryName'), variables('aiSearchConnectionName'))]",
              "properties": {
                "category": "CognitiveSearch",
                "target": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2025-02-01-preview').endpoint]",
                "authType": "AAD",
                "isSharedToAll": true,
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]",
                  "location": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2025-02-01-preview', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', variables('aiFoundryName'))]",
              "name": "[guid(resourceGroup().id, resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName')), resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2025-02-01-preview', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', variables('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiFoundryName'), variables('aiProjectName')), extensionResourceId(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), 'Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f'))]",
              "properties": {
                "roleDefinitionId": "[extensionResourceId(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), 'Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f')]",
                "principalId": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiFoundryName'), variables('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiFoundryName'), variables('aiProjectName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', variables('aiSearchName'))]",
              "name": "[guid(resourceGroup().id, variables('existingAIProjectName'), extensionResourceId(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), 'Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f'), 'Existing')]",
              "properties": {
                "roleDefinitionId": "[extensionResourceId(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), 'Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f')]",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'assignOpenAIRoleToAISearchExisting'), '2022-09-01').outputs.aiProjectPrincipalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'assignOpenAIRoleToAISearchExisting')]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', variables('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiFoundryName'), variables('aiProjectName')), extensionResourceId(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), 'Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0'))]",
              "properties": {
                "roleDefinitionId": "[extensionResourceId(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), 'Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalId": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiFoundryName'), variables('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiFoundryName'), variables('aiProjectName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', variables('aiSearchName'))]",
              "name": "[guid(resourceGroup().id, variables('existingAIProjectName'), extensionResourceId(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), 'Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0'), 'Existing')]",
              "properties": {
                "roleDefinitionId": "[extensionResourceId(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), 'Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'assignOpenAIRoleToAISearchExisting'), '2022-09-01').outputs.aiProjectPrincipalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.Resources/deployments', 'assignOpenAIRoleToAISearchExisting')]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.CognitiveServices/accounts/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', variables('aiFoundryName'), variables('aiAppInsightConnectionName'))]",
              "properties": {
                "category": "AppInsights",
                "target": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
                "authType": "ApiKey",
                "isSharedToAll": true,
                "credentials": {
                  "key": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').ConnectionString]"
                },
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]",
                "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-PREVIEW-API-VERSION')]",
              "properties": {
                "value": "[parameters('azureOpenaiAPIVersion')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-ENDPOINT')]",
              "properties": {
                "value": "[if(not(empty(variables('existingOpenAIEndpoint'))), variables('existingOpenAIEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API'])]"
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-EMBEDDING-MODEL')]",
              "properties": {
                "value": "[parameters('embeddingModel')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-ENDPOINT')]",
              "properties": {
                "value": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]"
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-INDEX')]",
              "properties": {
                "value": "transcripts_index"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aiProjectSearchConnectionDeployment",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "existingAIProjectName": {
                    "value": "[variables('existingAIProjectName')]"
                  },
                  "existingAIFoundryName": {
                    "value": "[variables('existingAIFoundryName')]"
                  },
                  "aiSearchName": {
                    "value": "[variables('aiSearchName')]"
                  },
                  "aiSearchResourceId": {
                    "value": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
                  },
                  "aiSearchLocation": {
                    "value": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2025-02-01-preview', 'full').location]"
                  },
                  "aiSearchConnectionName": {
                    "value": "[variables('aiSearchConnectionName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "6038840175458269917"
                    }
                  },
                  "parameters": {
                    "existingAIProjectName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Existing AI Project Name"
                      }
                    },
                    "existingAIFoundryName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Existing AI Foundry Name"
                      }
                    },
                    "aiSearchName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. AI Search Name"
                      }
                    },
                    "aiSearchResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. AI Search Resource ID"
                      }
                    },
                    "aiSearchLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. AI Search Location"
                      }
                    },
                    "aiSearchConnectionName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. AI Search Connection Name"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.CognitiveServices/accounts/projects/connections",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('existingAIFoundryName'), parameters('existingAIProjectName'), parameters('aiSearchConnectionName'))]",
                      "properties": {
                        "category": "CognitiveSearch",
                        "target": "[format('https://{0}.search.windows.net', parameters('aiSearchName'))]",
                        "authType": "AAD",
                        "isSharedToAll": true,
                        "metadata": {
                          "ApiType": "Azure",
                          "ResourceId": "[parameters('aiSearchResourceId')]",
                          "location": "[parameters('aiSearchLocation')]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "assignOpenAIRoleToAISearchExisting",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionId": {
                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]"
                  },
                  "roleAssignmentName": {
                    "value": "[guid(resourceGroup().id, resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'), 'openai-foundry')]"
                  },
                  "aiFoundryName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), createObject('value', variables('existingAIFoundryName')), createObject('value', variables('aiFoundryName')))]",
                  "principalId": {
                    "value": "[reference(resourceId('Microsoft.Search/searchServices', variables('aiSearchName')), '2025-02-01-preview', 'full').identity.principalId]"
                  },
                  "aiProjectName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), createObject('value', variables('existingAIProjectName')), createObject('value', variables('aiProjectName')))]",
                  "aiModelDeployments": {
                    "value": "[variables('aiModelDeployments')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "14256377996349985323"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Principal ID to assign the role to."
                      }
                    },
                    "roleDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. ID of the role definition to assign."
                      }
                    },
                    "roleAssignmentName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the role assignment."
                      }
                    },
                    "aiFoundryName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the AI Foundry resource."
                      }
                    },
                    "aiProjectName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the AI project."
                      }
                    },
                    "aiModelDeployments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of AI model deployments."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied to the resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "aiServicesDeployments",
                        "count": "[length(parameters('aiModelDeployments'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[not(empty(parameters('aiModelDeployments')))]",
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiFoundryName'), parameters('aiModelDeployments')[copyIndex()].name)]",
                      "properties": {
                        "model": {
                          "format": "OpenAI",
                          "name": "[parameters('aiModelDeployments')[copyIndex()].model]"
                        },
                        "raiPolicyName": "[parameters('aiModelDeployments')[copyIndex()].raiPolicyName]"
                      },
                      "sku": {
                        "name": "[parameters('aiModelDeployments')[copyIndex()].sku.name]",
                        "capacity": "[parameters('aiModelDeployments')[copyIndex()].sku.capacity]"
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiFoundryName'))]",
                      "name": "[parameters('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ],
                  "outputs": {
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Principal ID of the AI Services resource."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiFoundryName')), '2025-04-01-preview', 'full').identity.principalId]"
                    },
                    "aiProjectPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Principal ID of the AI Project resource if defined."
                      },
                      "value": "[if(not(empty(parameters('aiProjectName'))), reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiFoundryName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId, '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
              ]
            }
          ],
          "outputs": {
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "Contains Name of KeyVault."
              },
              "value": "[variables('keyvaultName')]"
            },
            "keyvaultId": {
              "type": "string",
              "metadata": {
                "description": "Contains KeyVault ID."
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "resourceGroupNameFoundry": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Foundry ResourceGroup Name"
              },
              "value": "[if(not(empty(variables('existingAIServiceResourceGroup'))), variables('existingAIServiceResourceGroup'), resourceGroup().name)]"
            },
            "aiFoundryProjectEndpoint": {
              "type": "string",
              "metadata": {
                "description": "Contains Name of AI Foundry Project Endpoint."
              },
              "value": "[if(not(empty(variables('existingProjEndpoint'))), variables('existingProjEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts/projects', variables('aiFoundryName'), variables('aiProjectName')), '2025-04-01-preview').endpoints['AI Foundry API'])]"
            },
            "aoaiEndpoint": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Endpoint."
              },
              "value": "[if(not(empty(variables('existingOpenAIEndpoint'))), variables('existingOpenAIEndpoint'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName')), '2025-04-01-preview').endpoints['OpenAI Language Model Instance API'])]"
            },
            "aiFoundryName": {
              "type": "string",
              "metadata": {
                "description": "Contains Name of AI Foundry."
              },
              "value": "[if(not(empty(variables('existingAIFoundryName'))), variables('existingAIFoundryName'), variables('aiFoundryName'))]"
            },
            "aiFoundryId": {
              "type": "string",
              "value": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.CognitiveServices/accounts', variables('existingAIFoundryName')), resourceId('Microsoft.CognitiveServices/accounts', variables('aiFoundryName')))]"
            },
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Search Name."
              },
              "value": "[variables('aiSearchName')]"
            },
            "aiSearchId": {
              "type": "string",
              "metadata": {
                "description": "Contains AI SearchID."
              },
              "value": "[resourceId('Microsoft.Search/searchServices', variables('aiSearchName'))]"
            },
            "aiSearchTarget": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Search Target."
              },
              "value": "[format('https://{0}.search.windows.net', variables('aiSearchName'))]"
            },
            "aiSearchService": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Search Service."
              },
              "value": "[variables('aiSearchName')]"
            },
            "aiFoundryProjectName": {
              "type": "string",
              "metadata": {
                "description": "Contains Name of AI Foundry Project."
              },
              "value": "[if(not(empty(variables('existingAIProjectName'))), variables('existingAIProjectName'), variables('aiProjectName'))]"
            },
            "applicationInsightsId": {
              "type": "string",
              "metadata": {
                "description": "Contains Application Insights ID."
              },
              "value": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            },
            "instrumentationKey": {
              "type": "string",
              "metadata": {
                "description": "The Instrumentation Key for the Application Insights resource."
              },
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            "logAnalyticsWorkspaceResourceName": {
              "type": "string",
              "metadata": {
                "description": "Contains Log Analytics Workspace Resource Name."
              },
              "value": "[if(variables('useExisting'), variables('existingLawName'), variables('workspaceName'))]"
            },
            "logAnalyticsWorkspaceResourceGroup": {
              "type": "string",
              "metadata": {
                "description": "Contains Log Analytics Workspace ResourceGroup Name."
              },
              "value": "[if(variables('useExisting'), variables('existingLawResourceGroup'), resourceGroup().name)]"
            },
            "applicationInsightsConnectionString": {
              "type": "string",
              "metadata": {
                "description": "Contains Application Insights Connection String."
              },
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').ConnectionString]"
            },
            "aiSearchFoundryConnectionName": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Search Foundry Connection Name."
              },
              "value": "[variables('aiSearchConnectionName')]"
            },
            "aiAppInsightsFoundryConnectionName": {
              "type": "string",
              "metadata": {
                "description": "Contains AI Foundry App Insights Connection Name."
              },
              "value": "[variables('aiAppInsightConnectionName')]"
            },
            "aiModelDeployments": {
              "type": "array",
              "metadata": {
                "description": "Contains AI Model Deployments"
              },
              "value": "[variables('aiModelDeployments')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_cosmos_db",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[parameters('cosmosLocation')]"
          },
          "cosmosDBName": {
            "value": "[format('cosmos-{0}', variables('solutionSuffix'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "7830346183750605706"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "minLength": 3,
              "maxLength": 20,
              "metadata": {
                "description": "Required. Solution location."
              }
            },
            "cosmosDBName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Azure Cosmos DB account."
              }
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "db_conversation_history",
              "metadata": {
                "description": "Optional. Name of the Cosmos DB database."
              }
            },
            "collectionName": {
              "type": "string",
              "defaultValue": "conversations",
              "metadata": {
                "description": "Optional.Name of the Cosmos DB container (collection)."
              }
            },
            "containers": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "[parameters('collectionName')]",
                  "id": "[parameters('collectionName')]",
                  "partitionKey": "/userId"
                }
              ],
              "metadata": {
                "description": "Optional. List of Cosmos DB containers to be created."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "GlobalDocumentDB",
              "allowedValues": [
                "GlobalDocumentDB",
                "MongoDB",
                "Parse"
              ],
              "metadata": {
                "description": "Optional. The API kind of the Cosmos DB account."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "database::list",
                "count": "[length(parameters('containers'))]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('cosmosDBName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('cosmosDBName'), parameters('databaseName')), '/')[1], parameters('containers')[copyIndex()].name)]",
              "properties": {
                "resource": {
                  "id": "[parameters('containers')[copyIndex()].id]",
                  "partitionKey": {
                    "paths": [
                      "[parameters('containers')[copyIndex()].partitionKey]"
                    ]
                  }
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('cosmosDBName'), parameters('databaseName')), '/')[0], split(format('{0}/{1}', parameters('cosmosDBName'), parameters('databaseName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2022-08-15",
              "name": "[parameters('cosmosDBName')]",
              "kind": "[parameters('kind')]",
              "location": "[parameters('solutionLocation')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('solutionLocation')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "disableLocalAuth": true,
                "apiProperties": "[if(equals(parameters('kind'), 'MongoDB'), createObject('serverVersion', '4.0'), createObject())]",
                "capabilities": [
                  {
                    "name": "EnableServerless"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', parameters('cosmosDBName'), parameters('databaseName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                }
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName'))]"
              ]
            }
          ],
          "outputs": {
            "cosmosAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Cosmos DB account."
              },
              "value": "[parameters('cosmosDBName')]"
            },
            "cosmosDatabaseName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Cosmos DB database."
              },
              "value": "[parameters('databaseName')]"
            },
            "cosmosContainerName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Cosmos DB container."
              },
              "value": "[parameters('collectionName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_storage_account",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "saName": {
            "value": "[format('st{0}', variables('solutionSuffix'))]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "3164769802823369019"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Deployment location for the solution."
              }
            },
            "saName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the storage account."
              }
            },
            "managedIdentityObjectId": {
              "type": "string",
              "metadata": {
                "description": "Required. Object ID of the managed identity."
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Azure Key Vault."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('saName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "kind": "StorageV2",
              "properties": {
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "isHnsEnabled": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot",
                "allowSharedKeyAccess": false
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', parameters('saName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                },
                "deleteRetentionPolicy": {
                  "allowPermanentDelete": false,
                  "enabled": false
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', parameters('saName'), 'default', 'data')]",
              "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('saName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, parameters('managedIdentityObjectId'), resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'))]",
              "properties": {
                "principalId": "[parameters('managedIdentityObjectId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'ADLS-ACCOUNT-NAME')]",
              "properties": {
                "value": "[parameters('saName')]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'ADLS-ACCOUNT-CONTAINER')]",
              "properties": {
                "value": "data"
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "storageName": {
              "type": "string",
              "metadata": {
                "description": "Name of the storage account."
              },
              "value": "[parameters('saName')]"
            },
            "storageContainer": {
              "type": "string",
              "metadata": {
                "description": "Name of the default storage container."
              },
              "value": "data"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_sql_db",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
          },
          "managedIdentityObjectId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.objectId]"
          },
          "managedIdentityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityOutput.value.name]"
          },
          "serverName": {
            "value": "[format('sql-{0}', variables('solutionSuffix'))]"
          },
          "sqlDBName": {
            "value": "[format('sqldb-{0}', variables('solutionSuffix'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16739666735476206580"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Deployment location for the solution."
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Azure Key Vault."
              }
            },
            "managedIdentityObjectId": {
              "type": "string",
              "metadata": {
                "description": "Required. Object ID of the managed identity."
              }
            },
            "managedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the managed identity."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the SQL logical server."
              }
            },
            "sqlDBName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the SQL Database."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[parameters('solutionLocation')]",
              "metadata": {
                "description": "Required. Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2023-08-01-preview",
              "name": "[parameters('serverName')]",
              "location": "[parameters('location')]",
              "kind": "v12.0",
              "properties": {
                "publicNetworkAccess": "Enabled",
                "version": "12.0",
                "restrictOutboundNetworkAccess": "Disabled",
                "minimalTlsVersion": "1.2",
                "administrators": {
                  "login": "[parameters('managedIdentityName')]",
                  "sid": "[parameters('managedIdentityObjectId')]",
                  "tenantId": "[subscription().tenantId]",
                  "administratorType": "ActiveDirectory",
                  "azureADOnlyAuthentication": true
                }
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'AllowSpecificRange')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "255.255.255.255"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'AllowAllWindowsAzureIps')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2023-08-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('sqlDBName'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "GP_S_Gen5",
                "tier": "GeneralPurpose",
                "family": "Gen5",
                "capacity": 2
              },
              "kind": "v12.0,user,vcore,serverless",
              "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "autoPauseDelay": 60,
                "minCapacity": 1,
                "readScale": "Disabled",
                "zoneRedundant": false
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'SQLDB-SERVER')]",
              "properties": {
                "value": "[format('{0}.database.windows.net', parameters('serverName'))]"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'SQLDB-DATABASE')]",
              "properties": {
                "value": "[parameters('sqlDBName')]"
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "sqlServerName": {
              "type": "string",
              "metadata": {
                "description": "Name of the SQL logical server."
              },
              "value": "[parameters('serverName')]"
            },
            "sqlDbName": {
              "type": "string",
              "metadata": {
                "description": "Name of the SQL database."
              },
              "value": "[parameters('sqlDBName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy_app_service",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "solutionLocation": {
            "value": "[variables('solutionLocation')]"
          },
          "hostingPlanName": {
            "value": "[variables('hostingPlanName')]"
          },
          "websiteName": {
            "value": "[variables('websiteName')]"
          },
          "appEnvironment": {
            "value": "[variables('appEnvironment')]"
          },
          "azureSearchService": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchService.value]"
          },
          "azureSearchIndex": {
            "value": "[variables('azureSearchIndex')]"
          },
          "azureSearchUseSemanticSearch": {
            "value": "[variables('azureSearchUseSemanticSearch')]"
          },
          "azureSearchSemanticSearchConfig": {
            "value": "[variables('azureSearchSemanticSearchConfig')]"
          },
          "azureSearchTopK": {
            "value": "[variables('azureSearchTopK')]"
          },
          "azureSearchContentColumns": {
            "value": "[variables('azureSearchContentColumns')]"
          },
          "azureSearchFilenameColumn": {
            "value": "[variables('azureSearchFilenameColumn')]"
          },
          "azureSearchTitleColumn": {
            "value": "[variables('azureSearchTitleColumn')]"
          },
          "azureSearchUrlColumn": {
            "value": "[variables('azureSearchUrlColumn')]"
          },
          "azureOpenAIResource": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiFoundryName.value]"
          },
          "azureOpenAIEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aoaiEndpoint.value]"
          },
          "azureOpenAIModel": {
            "value": "[parameters('gptModelName')]"
          },
          "azureOpenAITemperature": {
            "value": "[variables('azureOpenAITemperature')]"
          },
          "azureOpenAITopP": {
            "value": "[variables('azureOpenAITopP')]"
          },
          "azureOpenAIMaxTokens": {
            "value": "[variables('azureOpenAIMaxTokens')]"
          },
          "azureOpenAIStopSequence": {
            "value": "[variables('azureOpenAIStopSequence')]"
          },
          "azureOpenAISystemMessage": {
            "value": "[variables('azureOpenAISystemMessage')]"
          },
          "azureOpenAIApiVersion": {
            "value": "[parameters('azureOpenaiAPIVersion')]"
          },
          "azureOpenAIStream": {
            "value": "[variables('azureOpenAIStream')]"
          },
          "azureSearchQueryType": {
            "value": "[variables('azureSearchQueryType')]"
          },
          "azureSearchVectorFields": {
            "value": "[variables('azureSearchVectorFields')]"
          },
          "azureSearchPermittedGroupsField": {
            "value": "[variables('azureSearchPermittedGroupsField')]"
          },
          "azureSearchStrictness": {
            "value": "[variables('azureSearchStrictness')]"
          },
          "azureOpenAIEmbeddingName": {
            "value": "[parameters('embeddingModel')]"
          },
          "azureOpenAIEmbeddingEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aoaiEndpoint.value]"
          },
          "USE_INTERNAL_STREAM": {
            "value": "[variables('useInternalStream')]"
          },
          "SQLDB_SERVER": {
            "value": "[format('{0}.database.windows.net', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlServerName.value)]"
          },
          "SQLDB_DATABASE": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlDbName.value]"
          },
          "AZURE_COSMOSDB_ACCOUNT": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosAccountName.value]"
          },
          "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosContainerName.value]"
          },
          "AZURE_COSMOSDB_DATABASE": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosDatabaseName.value]"
          },
          "AZURE_COSMOSDB_ENABLE_FEEDBACK": {
            "value": "[variables('azureCosmosDbEnableFeedback')]"
          },
          "imageTag": {
            "value": "[parameters('imageTag')]"
          },
          "userassignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.clientId]"
          },
          "userassignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.id]"
          },
          "applicationInsightsId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsId.value]"
          },
          "azureSearchServiceEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchTarget.value]"
          },
          "sqlSystemPrompt": {
            "value": "[variables('functionAppSqlPrompt')]"
          },
          "callTranscriptSystemPrompt": {
            "value": "[variables('functionAppCallTranscriptSystemPrompt')]"
          },
          "streamTextSystemPrompt": {
            "value": "[variables('functionAppStreamTextSystemPrompt')]"
          },
          "aiFoundryProjectEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiFoundryProjectEndpoint.value]"
          },
          "aiFoundryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiFoundryName.value]"
          },
          "applicationInsightsConnectionString": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
          },
          "azureExistingAIProjectResourceId": {
            "value": "[parameters('azureExistingAIProjectResourceId')]"
          },
          "aiSearchProjectConnectionName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchFoundryConnectionName.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1598037199910826757"
            }
          },
          "parameters": {
            "solutionLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Solution Location"
              }
            },
            "hostingPlanSku": {
              "type": "string",
              "defaultValue": "B2",
              "allowedValues": [
                "F1",
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4",
                "P0v3"
              ],
              "metadata": {
                "description": "Optional. The pricing tier for the App Service plan"
              }
            },
            "hostingPlanName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of App Service plan"
              }
            },
            "websiteName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of Web App"
              }
            },
            "appEnvironment": {
              "type": "string",
              "metadata": {
                "description": "Specifies the application environment"
              }
            },
            "azureSearchService": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of Azure Search Service"
              }
            },
            "azureSearchIndex": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of Azure Search Index"
              }
            },
            "azureSearchUseSemanticSearch": {
              "type": "string",
              "defaultValue": "False",
              "metadata": {
                "description": "Optional. Use semantic search"
              }
            },
            "azureSearchSemanticSearchConfig": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Optional. Semantic search config"
              }
            },
            "azureSearchTopK": {
              "type": "string",
              "defaultValue": "5",
              "metadata": {
                "description": "Optional. Top K results"
              }
            },
            "azureSearchEnableInDomain": {
              "type": "string",
              "defaultValue": "False",
              "metadata": {
                "description": "Optional. Enable in domain"
              }
            },
            "azureSearchContentColumns": {
              "type": "string",
              "defaultValue": "content",
              "metadata": {
                "description": "Optional. Content columns"
              }
            },
            "azureSearchFilenameColumn": {
              "type": "string",
              "defaultValue": "filename",
              "metadata": {
                "description": "Optional. Filename column"
              }
            },
            "azureSearchTitleColumn": {
              "type": "string",
              "defaultValue": "client_id",
              "metadata": {
                "description": "Optional. Title column"
              }
            },
            "azureSearchUrlColumn": {
              "type": "string",
              "defaultValue": "sourceurl",
              "metadata": {
                "description": "Optional. Url column"
              }
            },
            "azureOpenAIResource": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of Azure OpenAI Resource"
              }
            },
            "azureOpenAIModel": {
              "type": "string",
              "defaultValue": "gpt-4o-mini",
              "metadata": {
                "description": "Optional. Azure OpenAI Model Deployment Name"
              }
            },
            "azureOpenAIEndpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Azure Open AI Endpoint"
              }
            },
            "azureOpenAITemperature": {
              "type": "string",
              "defaultValue": "0",
              "metadata": {
                "description": "Optional. Azure OpenAI Temperature"
              }
            },
            "azureOpenAITopP": {
              "type": "string",
              "defaultValue": "1",
              "metadata": {
                "description": "Optional. Azure OpenAI Top P"
              }
            },
            "azureOpenAIMaxTokens": {
              "type": "string",
              "defaultValue": "1000",
              "metadata": {
                "description": "Optional. Azure OpenAI Max Tokens"
              }
            },
            "azureOpenAIStopSequence": {
              "type": "string",
              "defaultValue": "\n",
              "metadata": {
                "description": "Optional. Azure OpenAI Stop Sequence"
              }
            },
            "azureOpenAISystemMessage": {
              "type": "string",
              "defaultValue": "You are an AI assistant that helps people find information.",
              "metadata": {
                "description": "Optional. Azure OpenAI System Message"
              }
            },
            "azureOpenAIApiVersion": {
              "type": "string",
              "defaultValue": "2024-02-15-preview",
              "metadata": {
                "description": "Optional. Azure OpenAI Api Version"
              }
            },
            "azureOpenAIStream": {
              "type": "string",
              "defaultValue": "True",
              "metadata": {
                "description": "Optional. Whether or not to stream responses from Azure OpenAI"
              }
            },
            "azureSearchQueryType": {
              "type": "string",
              "defaultValue": "simple",
              "allowedValues": [
                "simple",
                "semantic",
                "vector",
                "vectorSimpleHybrid",
                "vectorSemanticHybrid"
              ],
              "metadata": {
                "description": "Optional. Azure Search Query Type"
              }
            },
            "azureSearchVectorFields": {
              "type": "string",
              "defaultValue": "contentVector",
              "metadata": {
                "description": "Optional. Azure Search Vector Fields"
              }
            },
            "azureSearchPermittedGroupsField": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Azure Search Permitted Groups Field"
              }
            },
            "azureSearchStrictness": {
              "type": "string",
              "defaultValue": "3",
              "allowedValues": [
                "1",
                "2",
                "3",
                "4",
                "5"
              ],
              "metadata": {
                "description": "Optional. Azure Search Strictness"
              }
            },
            "azureOpenAIEmbeddingName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Azure OpenAI Embedding Deployment Name"
              }
            },
            "azureOpenAIEmbeddingEndpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Azure Open AI Embedding Endpoint"
              }
            },
            "USE_INTERNAL_STREAM": {
              "type": "string",
              "defaultValue": "True",
              "metadata": {
                "description": "Optional. Use Azure Function"
              }
            },
            "SQLDB_SERVER": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. SQL Database Server Name"
              }
            },
            "SQLDB_DATABASE": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. SQL Database Name"
              }
            },
            "AZURE_COSMOSDB_ACCOUNT": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Azure Cosmos DB Account"
              }
            },
            "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Azure Cosmos DB Conversations Container"
              }
            },
            "AZURE_COSMOSDB_DATABASE": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Azure Cosmos DB Database"
              }
            },
            "AZURE_COSMOSDB_ENABLE_FEEDBACK": {
              "type": "string",
              "defaultValue": "True",
              "metadata": {
                "description": "Optional. Enable feedback in Cosmos DB"
              }
            },
            "imageTag": {
              "type": "string",
              "metadata": {
                "description": "Required. The container image tag to be deployed"
              }
            },
            "userassignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the user-assigned managed identity to be used by the deployed resources."
              }
            },
            "userassignedIdentityClientId": {
              "type": "string",
              "metadata": {
                "description": "Required. The client ID of the user-assigned managed identity."
              }
            },
            "applicationInsightsId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Instrumentation Key or Resource ID of the Application Insights resource used for monitoring."
              }
            },
            "azureSearchServiceEndpoint": {
              "type": "string",
              "metadata": {
                "description": "Required. The endpoint URL of the Azure Cognitive Search service."
              }
            },
            "sqlSystemPrompt": {
              "type": "string",
              "metadata": {
                "description": "Required. Azure Function App SQL System Prompt"
              }
            },
            "callTranscriptSystemPrompt": {
              "type": "string",
              "metadata": {
                "description": "Required. Azure Function App CallTranscript System Prompt"
              }
            },
            "streamTextSystemPrompt": {
              "type": "string",
              "metadata": {
                "description": "Required. Azure Function App Stream Text System Prompt"
              }
            },
            "aiFoundryProjectEndpoint": {
              "type": "string",
              "metadata": {
                "description": "Required. AI Foundry project endpoint URL."
              }
            },
            "useAIProjectClientFlag": {
              "type": "string",
              "defaultValue": "false",
              "metadata": {
                "description": "Optional. Flag to enable AI project client."
              }
            },
            "aiFoundryName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the AI Foundry project."
              }
            },
            "applicationInsightsConnectionString": {
              "type": "string",
              "metadata": {
                "description": "Required. Application Insights connection string."
              }
            },
            "aiSearchProjectConnectionName": {
              "type": "string",
              "metadata": {
                "description": "Required. Connection name for Azure Cognitive Search."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to be applied to the resources."
              }
            },
            "azureExistingAIProjectResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the existing AI Foundry project."
              }
            }
          },
          "variables": {
            "webAppImageName": "[format('DOCKER|bycwacontainerreg.azurecr.io/byc-wa-app:{0}', parameters('imageTag'))]",
            "existingAIServiceSubscription": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[2], subscription().subscriptionId)]",
            "existingAIServiceResourceGroup": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[4], resourceGroup().name)]",
            "existingAIServicesName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[8], '')]",
            "existingAIProjectName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), split(parameters('azureExistingAIProjectResourceId'), '/')[10], '')]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2020-06-01",
              "name": "[parameters('hostingPlanName')]",
              "location": "[parameters('solutionLocation')]",
              "sku": {
                "name": "[parameters('hostingPlanSku')]"
              },
              "properties": {
                "name": "[parameters('hostingPlanName')]",
                "reserved": true
              },
              "kind": "linux",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-06-01",
              "name": "[parameters('websiteName')]",
              "location": "[parameters('solutionLocation')]",
              "identity": {
                "type": "SystemAssigned, UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userassignedIdentityId'))]": {}
                }
              },
              "properties": {
                "serverFarmId": "[parameters('hostingPlanName')]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "APP_ENV",
                      "value": "[parameters('appEnvironment')]"
                    },
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(parameters('applicationInsightsId'), '2015-05-01').InstrumentationKey]"
                    },
                    {
                      "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                      "value": "[parameters('applicationInsightsConnectionString')]"
                    },
                    {
                      "name": "AZURE_SEARCH_SERVICE",
                      "value": "[parameters('azureSearchService')]"
                    },
                    {
                      "name": "AZURE_SEARCH_INDEX",
                      "value": "[parameters('azureSearchIndex')]"
                    },
                    {
                      "name": "AZURE_SEARCH_USE_SEMANTIC_SEARCH",
                      "value": "[parameters('azureSearchUseSemanticSearch')]"
                    },
                    {
                      "name": "AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG",
                      "value": "[parameters('azureSearchSemanticSearchConfig')]"
                    },
                    {
                      "name": "AZURE_SEARCH_TOP_K",
                      "value": "[parameters('azureSearchTopK')]"
                    },
                    {
                      "name": "AZURE_SEARCH_ENABLE_IN_DOMAIN",
                      "value": "[parameters('azureSearchEnableInDomain')]"
                    },
                    {
                      "name": "AZURE_SEARCH_CONTENT_COLUMNS",
                      "value": "[parameters('azureSearchContentColumns')]"
                    },
                    {
                      "name": "AZURE_SEARCH_FILENAME_COLUMN",
                      "value": "[parameters('azureSearchFilenameColumn')]"
                    },
                    {
                      "name": "AZURE_SEARCH_TITLE_COLUMN",
                      "value": "[parameters('azureSearchTitleColumn')]"
                    },
                    {
                      "name": "AZURE_SEARCH_URL_COLUMN",
                      "value": "[parameters('azureSearchUrlColumn')]"
                    },
                    {
                      "name": "AZURE_OPENAI_RESOURCE",
                      "value": "[parameters('azureOpenAIResource')]"
                    },
                    {
                      "name": "AZURE_OPENAI_MODEL",
                      "value": "[parameters('azureOpenAIModel')]"
                    },
                    {
                      "name": "AZURE_OPENAI_ENDPOINT",
                      "value": "[parameters('azureOpenAIEndpoint')]"
                    },
                    {
                      "name": "AZURE_OPENAI_TEMPERATURE",
                      "value": "[parameters('azureOpenAITemperature')]"
                    },
                    {
                      "name": "AZURE_OPENAI_TOP_P",
                      "value": "[parameters('azureOpenAITopP')]"
                    },
                    {
                      "name": "AZURE_OPENAI_MAX_TOKENS",
                      "value": "[parameters('azureOpenAIMaxTokens')]"
                    },
                    {
                      "name": "AZURE_OPENAI_STOP_SEQUENCE",
                      "value": "[parameters('azureOpenAIStopSequence')]"
                    },
                    {
                      "name": "AZURE_OPENAI_SYSTEM_MESSAGE",
                      "value": "[parameters('azureOpenAISystemMessage')]"
                    },
                    {
                      "name": "AZURE_OPENAI_PREVIEW_API_VERSION",
                      "value": "[parameters('azureOpenAIApiVersion')]"
                    },
                    {
                      "name": "AZURE_OPENAI_STREAM",
                      "value": "[parameters('azureOpenAIStream')]"
                    },
                    {
                      "name": "AZURE_SEARCH_QUERY_TYPE",
                      "value": "[parameters('azureSearchQueryType')]"
                    },
                    {
                      "name": "AZURE_SEARCH_VECTOR_COLUMNS",
                      "value": "[parameters('azureSearchVectorFields')]"
                    },
                    {
                      "name": "AZURE_SEARCH_PERMITTED_GROUPS_COLUMN",
                      "value": "[parameters('azureSearchPermittedGroupsField')]"
                    },
                    {
                      "name": "AZURE_SEARCH_STRICTNESS",
                      "value": "[parameters('azureSearchStrictness')]"
                    },
                    {
                      "name": "AZURE_OPENAI_EMBEDDING_NAME",
                      "value": "[parameters('azureOpenAIEmbeddingName')]"
                    },
                    {
                      "name": "AZURE_OPENAI_EMBEDDING_ENDPOINT",
                      "value": "[parameters('azureOpenAIEmbeddingEndpoint')]"
                    },
                    {
                      "name": "SQLDB_SERVER",
                      "value": "[parameters('SQLDB_SERVER')]"
                    },
                    {
                      "name": "SQLDB_DATABASE",
                      "value": "[parameters('SQLDB_DATABASE')]"
                    },
                    {
                      "name": "USE_INTERNAL_STREAM",
                      "value": "[parameters('USE_INTERNAL_STREAM')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_ACCOUNT",
                      "value": "[parameters('AZURE_COSMOSDB_ACCOUNT')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER",
                      "value": "[parameters('AZURE_COSMOSDB_CONVERSATIONS_CONTAINER')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_DATABASE",
                      "value": "[parameters('AZURE_COSMOSDB_DATABASE')]"
                    },
                    {
                      "name": "AZURE_COSMOSDB_ENABLE_FEEDBACK",
                      "value": "[parameters('AZURE_COSMOSDB_ENABLE_FEEDBACK')]"
                    },
                    {
                      "name": "SQLDB_USER_MID",
                      "value": "[parameters('userassignedIdentityClientId')]"
                    },
                    {
                      "name": "AZURE_AI_SEARCH_ENDPOINT",
                      "value": "[parameters('azureSearchServiceEndpoint')]"
                    },
                    {
                      "name": "AZURE_SQL_SYSTEM_PROMPT",
                      "value": "[parameters('sqlSystemPrompt')]"
                    },
                    {
                      "name": "AZURE_CALL_TRANSCRIPT_SYSTEM_PROMPT",
                      "value": "[parameters('callTranscriptSystemPrompt')]"
                    },
                    {
                      "name": "AZURE_OPENAI_STREAM_TEXT_SYSTEM_PROMPT",
                      "value": "[parameters('streamTextSystemPrompt')]"
                    },
                    {
                      "name": "USE_AI_PROJECT_CLIENT",
                      "value": "[parameters('useAIProjectClientFlag')]"
                    },
                    {
                      "name": "AZURE_AI_AGENT_ENDPOINT",
                      "value": "[parameters('aiFoundryProjectEndpoint')]"
                    },
                    {
                      "name": "AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME",
                      "value": "[parameters('azureOpenAIModel')]"
                    },
                    {
                      "name": "AZURE_AI_AGENT_API_VERSION",
                      "value": "[parameters('azureOpenAIApiVersion')]"
                    },
                    {
                      "name": "AZURE_SEARCH_CONNECTION_NAME",
                      "value": "[parameters('aiSearchProjectConnectionName')]"
                    }
                  ],
                  "linuxFxVersion": "[variables('webAppImageName')]"
                }
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
              ]
            },
            {
              "condition": "[empty(parameters('azureExistingAIProjectResourceId'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.CognitiveServices/accounts', parameters('aiFoundryName')), extensionResourceId(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.CognitiveServices/accounts', parameters('aiFoundryName')), 'Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('websiteName')), '2020-06-01', 'full').identity.principalId]",
                "roleDefinitionId": "[extensionResourceId(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.CognitiveServices/accounts', parameters('aiFoundryName')), 'Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('websiteName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('cosmos-sql-user-role-{0}', parameters('websiteName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "accountName": {
                    "value": "[parameters('AZURE_COSMOSDB_ACCOUNT')]"
                  },
                  "roleDefinitionId": {
                    "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', split(format('{0}/00000000-0000-0000-0000-000000000002', parameters('AZURE_COSMOSDB_ACCOUNT')), '/')[0], split(format('{0}/00000000-0000-0000-0000-000000000002', parameters('AZURE_COSMOSDB_ACCOUNT')), '/')[1])]"
                  },
                  "principalId": {
                    "value": "[reference(resourceId('Microsoft.Web/sites', parameters('websiteName')), '2020-06-01', 'full').identity.principalId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "13822905633352095375"
                    },
                    "description": "Creates a SQL role assignment under an Azure Cosmos DB account."
                  },
                  "parameters": {
                    "accountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Azure Cosmos DB account."
                      }
                    },
                    "roleDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. ID of the Cosmos DB SQL role definition."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Otional. Principal ID to assign the role to."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                      "apiVersion": "2022-05-15",
                      "name": "[format('{0}/{1}', parameters('accountName'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('websiteName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('azureExistingAIProjectResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "assignAiUserRoleToAiProjectExisting",
              "subscriptionId": "[variables('existingAIServiceSubscription')]",
              "resourceGroup": "[variables('existingAIServiceResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(resourceId('Microsoft.Web/sites', parameters('websiteName')), '2020-06-01', 'full').identity.principalId]"
                  },
                  "roleDefinitionId": {
                    "value": "[extensionResourceId(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.CognitiveServices/accounts', parameters('aiFoundryName')), 'Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]"
                  },
                  "roleAssignmentName": {
                    "value": "[guid(parameters('websiteName'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.CognitiveServices/accounts', parameters('aiFoundryName')), extensionResourceId(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('existingAIServiceSubscription'), variables('existingAIServiceResourceGroup')), 'Microsoft.CognitiveServices/accounts', parameters('aiFoundryName')), 'Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d'))]"
                  },
                  "aiFoundryName": "[if(not(empty(parameters('azureExistingAIProjectResourceId'))), createObject('value', variables('existingAIServicesName')), createObject('value', parameters('aiFoundryName')))]",
                  "aiProjectName": {
                    "value": "[variables('existingAIProjectName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "14256377996349985323"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Principal ID to assign the role to."
                      }
                    },
                    "roleDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. ID of the role definition to assign."
                      }
                    },
                    "roleAssignmentName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the role assignment."
                      }
                    },
                    "aiFoundryName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the AI Foundry resource."
                      }
                    },
                    "aiProjectName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the AI project."
                      }
                    },
                    "aiModelDeployments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of AI model deployments."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied to the resources."
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "aiServicesDeployments",
                        "count": "[length(parameters('aiModelDeployments'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[not(empty(parameters('aiModelDeployments')))]",
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiFoundryName'), parameters('aiModelDeployments')[copyIndex()].name)]",
                      "properties": {
                        "model": {
                          "format": "OpenAI",
                          "name": "[parameters('aiModelDeployments')[copyIndex()].model]"
                        },
                        "raiPolicyName": "[parameters('aiModelDeployments')[copyIndex()].raiPolicyName]"
                      },
                      "sku": {
                        "name": "[parameters('aiModelDeployments')[copyIndex()].sku.name]",
                        "capacity": "[parameters('aiModelDeployments')[copyIndex()].sku.capacity]"
                      },
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiFoundryName'))]",
                      "name": "[parameters('roleAssignmentName')]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ],
                  "outputs": {
                    "aiServicesPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Principal ID of the AI Services resource."
                      },
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiFoundryName')), '2025-04-01-preview', 'full').identity.principalId]"
                    },
                    "aiProjectPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Principal ID of the AI Project resource if defined."
                      },
                      "value": "[if(not(empty(parameters('aiProjectName'))), reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiFoundryName'), parameters('aiProjectName')), '2025-04-01-preview', 'full').identity.principalId, '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('websiteName'))]"
              ]
            }
          ],
          "outputs": {
            "webAppUrl": {
              "type": "string",
              "metadata": {
                "description": "URL of the deployed web application."
              },
              "value": "[format('https://{0}.azurewebsites.net', parameters('websiteName'))]"
            },
            "webAppName": {
              "type": "string",
              "metadata": {
                "description": "Name of the deployed web application."
              },
              "value": "[parameters('websiteName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db')]"
      ]
    }
  ],
  "outputs": {
    "WEB_APP_URL": {
      "type": "string",
      "metadata": {
        "description": "URL of the deployed web application."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_app_service'), '2022-09-01').outputs.webAppUrl.value]"
    },
    "STORAGE_ACCOUNT_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the storage account."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageName.value]"
    },
    "STORAGE_CONTAINER_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the storage container."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_storage_account'), '2022-09-01').outputs.storageContainer.value]"
    },
    "KEY_VAULT_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the Key Vault."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_keyvault'), '2022-09-01').outputs.keyvaultName.value]"
    },
    "COSMOSDB_ACCOUNT_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the Cosmos DB account."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosAccountName.value]"
    },
    "RESOURCE_GROUP_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the resource group."
      },
      "value": "[resourceGroup().name]"
    },
    "AI_FOUNDRY_RESOURCE_ID": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the AI Foundry instance."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiFoundryId.value]"
    },
    "SQLDB_SERVER_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the SQL Database server."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlServerName.value]"
    },
    "SQLDB_DATABASE": {
      "type": "string",
      "metadata": {
        "description": "Name of the SQL Database."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlDbName.value]"
    },
    "MANAGEDIDENTITY_WEBAPP_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the managed identity used by the web app."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.name]"
    },
    "MANAGEDIDENTITY_WEBAPP_CLIENTID": {
      "type": "string",
      "metadata": {
        "description": "Client ID of the managed identity used by the web app."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.clientId]"
    },
    "AI_SEARCH_SERVICE_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the AI Search service."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchService.value]"
    },
    "WEB_APP_NAME": {
      "type": "string",
      "metadata": {
        "description": "Name of the deployed web application."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_app_service'), '2022-09-01').outputs.webAppName.value]"
    },
    "APP_ENV": {
      "type": "string",
      "metadata": {
        "description": "Specifies the current application environment."
      },
      "value": "[variables('appEnvironment')]"
    },
    "APPINSIGHTS_INSTRUMENTATIONKEY": {
      "type": "string",
      "metadata": {
        "description": "The Application Insights instrumentation key."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.instrumentationKey.value]"
    },
    "APPLICATIONINSIGHTS_CONNECTION_STRING": {
      "type": "string",
      "metadata": {
        "description": "The Application Insights connection string."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
    },
    "AZURE_AI_AGENT_API_VERSION": {
      "type": "string",
      "metadata": {
        "description": "The API version used for the Azure AI Agent service."
      },
      "value": "[parameters('azureOpenaiAPIVersion')]"
    },
    "AZURE_AI_AGENT_ENDPOINT": {
      "type": "string",
      "metadata": {
        "description": "The endpoint URL of the Azure AI Agent project."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiFoundryProjectEndpoint.value]"
    },
    "AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME": {
      "type": "string",
      "metadata": {
        "description": "The deployment name of the GPT model for the Azure AI Agent."
      },
      "value": "[parameters('gptModelName')]"
    },
    "AZURE_AI_SEARCH_ENDPOINT": {
      "type": "string",
      "metadata": {
        "description": "The endpoint URL of the Azure AI Search service."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchTarget.value]"
    },
    "AZURE_CALL_TRANSCRIPT_SYSTEM_PROMPT": {
      "type": "string",
      "metadata": {
        "description": "The system prompt used for call transcript processing in Azure Functions."
      },
      "value": "[variables('functionAppCallTranscriptSystemPrompt')]"
    },
    "AZURE_COSMOSDB_ACCOUNT": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Cosmos DB account."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosAccountName.value]"
    },
    "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Cosmos DB container for storing conversations."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosContainerName.value]"
    },
    "AZURE_COSMOSDB_DATABASE": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Cosmos DB database."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_cosmos_db'), '2022-09-01').outputs.cosmosDatabaseName.value]"
    },
    "AZURE_COSMOSDB_ENABLE_FEEDBACK": {
      "type": "string",
      "metadata": {
        "description": "Indicates whether feedback is enabled in Azure Cosmos DB."
      },
      "value": "[variables('azureCosmosDbEnableFeedback')]"
    },
    "AZURE_OPENAI_EMBEDDING_ENDPOINT": {
      "type": "string",
      "metadata": {
        "description": "The endpoint URL for the Azure OpenAI Embedding model."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aoaiEndpoint.value]"
    },
    "AZURE_OPENAI_EMBEDDING_NAME": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure OpenAI Embedding model."
      },
      "value": "[parameters('embeddingModel')]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "metadata": {
        "description": "The endpoint URL for the Azure OpenAI service."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aoaiEndpoint.value]"
    },
    "AZURE_OPENAI_MAX_TOKENS": {
      "type": "string",
      "metadata": {
        "description": "The maximum number of tokens for Azure OpenAI responses."
      },
      "value": "[variables('azureOpenAIMaxTokens')]"
    },
    "AZURE_OPENAI_MODEL": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure OpenAI GPT model."
      },
      "value": "[parameters('gptModelName')]"
    },
    "AZURE_OPENAI_PREVIEW_API_VERSION": {
      "type": "string",
      "metadata": {
        "description": "The preview API version for Azure OpenAI."
      },
      "value": "[parameters('azureOpenaiAPIVersion')]"
    },
    "AZURE_OPENAI_RESOURCE": {
      "type": "string",
      "metadata": {
        "description": "The Azure OpenAI resource name."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiFoundryName.value]"
    },
    "AZURE_OPENAI_STOP_SEQUENCE": {
      "type": "string",
      "metadata": {
        "description": "The stop sequence(s) for Azure OpenAI responses."
      },
      "value": "[variables('azureOpenAIStopSequence')]"
    },
    "AZURE_OPENAI_STREAM": {
      "type": "string",
      "metadata": {
        "description": "Indicates whether streaming is enabled for Azure OpenAI responses."
      },
      "value": "[variables('azureOpenAIStream')]"
    },
    "AZURE_OPENAI_STREAM_TEXT_SYSTEM_PROMPT": {
      "type": "string",
      "metadata": {
        "description": "The system prompt for streaming text responses in Azure Functions."
      },
      "value": "[variables('functionAppStreamTextSystemPrompt')]"
    },
    "AZURE_OPENAI_SYSTEM_MESSAGE": {
      "type": "string",
      "metadata": {
        "description": "The system message for Azure OpenAI requests."
      },
      "value": "[variables('azureOpenAISystemMessage')]"
    },
    "AZURE_OPENAI_TEMPERATURE": {
      "type": "string",
      "metadata": {
        "description": "The temperature setting for Azure OpenAI responses."
      },
      "value": "[variables('azureOpenAITemperature')]"
    },
    "AZURE_OPENAI_TOP_P": {
      "type": "string",
      "metadata": {
        "description": "The Top-P setting for Azure OpenAI responses."
      },
      "value": "[variables('azureOpenAITopP')]"
    },
    "AZURE_SEARCH_CONNECTION_NAME": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure AI Search connection."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchFoundryConnectionName.value]"
    },
    "AZURE_SEARCH_CONTENT_COLUMNS": {
      "type": "string",
      "metadata": {
        "description": "The columns in Azure AI Search that contain content."
      },
      "value": "[variables('azureSearchContentColumns')]"
    },
    "AZURE_SEARCH_ENABLE_IN_DOMAIN": {
      "type": "string",
      "metadata": {
        "description": "Indicates whether in-domain filtering is enabled for Azure AI Search."
      },
      "value": "[variables('azureSearchEnableInDomain')]"
    },
    "AZURE_SEARCH_FILENAME_COLUMN": {
      "type": "string",
      "metadata": {
        "description": "The filename column used in Azure AI Search."
      },
      "value": "[variables('azureSearchFilenameColumn')]"
    },
    "AZURE_SEARCH_INDEX": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure AI Search index."
      },
      "value": "[variables('azureSearchIndex')]"
    },
    "AZURE_SEARCH_PERMITTED_GROUPS_COLUMN": {
      "type": "string",
      "metadata": {
        "description": "The permitted groups field used in Azure AI Search."
      },
      "value": "[variables('azureSearchPermittedGroupsField')]"
    },
    "AZURE_SEARCH_QUERY_TYPE": {
      "type": "string",
      "metadata": {
        "description": "The query type for Azure AI Search."
      },
      "value": "[variables('azureSearchQueryType')]"
    },
    "AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG": {
      "type": "string",
      "metadata": {
        "description": "The semantic search configuration name in Azure AI Search."
      },
      "value": "[variables('azureSearchSemanticSearchConfig')]"
    },
    "AZURE_SEARCH_SERVICE": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure AI Search service."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_ai_foundry'), '2022-09-01').outputs.aiSearchService.value]"
    },
    "AZURE_SEARCH_STRICTNESS": {
      "type": "string",
      "metadata": {
        "description": "The strictness setting for Azure AI Search semantic ranking."
      },
      "value": "[variables('azureSearchStrictness')]"
    },
    "AZURE_SEARCH_TITLE_COLUMN": {
      "type": "string",
      "metadata": {
        "description": "The title column used in Azure AI Search."
      },
      "value": "[variables('azureSearchTitleColumn')]"
    },
    "AZURE_SEARCH_TOP_K": {
      "type": "string",
      "metadata": {
        "description": "The number of top results (K) to return from Azure AI Search."
      },
      "value": "[variables('azureSearchTopK')]"
    },
    "AZURE_SEARCH_URL_COLUMN": {
      "type": "string",
      "metadata": {
        "description": "The URL column used in Azure AI Search."
      },
      "value": "[variables('azureSearchUrlColumn')]"
    },
    "AZURE_SEARCH_USE_SEMANTIC_SEARCH": {
      "type": "string",
      "metadata": {
        "description": "Indicates whether semantic search is used in Azure AI Search."
      },
      "value": "[variables('azureSearchUseSemanticSearch')]"
    },
    "AZURE_SEARCH_VECTOR_COLUMNS": {
      "type": "string",
      "metadata": {
        "description": "The vector fields used in Azure AI Search."
      },
      "value": "[variables('azureSearchVectorFields')]"
    },
    "AZURE_SQL_SYSTEM_PROMPT": {
      "type": "string",
      "metadata": {
        "description": "The system prompt for SQL queries in Azure Functions."
      },
      "value": "[variables('functionAppSqlPrompt')]"
    },
    "SQLDB_SERVER": {
      "type": "string",
      "metadata": {
        "description": "The fully qualified domain name (FQDN) of the Azure SQL Server."
      },
      "value": "[format('{0}.database.windows.net', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_sql_db'), '2022-09-01').outputs.sqlServerName.value)]"
    },
    "SQLDB_USER_MID": {
      "type": "string",
      "metadata": {
        "description": "The client ID of the managed identity for the web application."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Resources/deployments', 'deploy_managed_identity'), '2022-09-01').outputs.managedIdentityWebAppOutput.value.clientId]"
    },
    "USE_AI_PROJECT_CLIENT": {
      "type": "string",
      "metadata": {
        "description": "Indicates whether the AI Project Client should be used."
      },
      "value": "[variables('useAIProjectClientFlag')]"
    },
    "USE_INTERNAL_STREAM": {
      "type": "string",
      "metadata": {
        "description": "Indicates whether the internal stream should be used."
      },
      "value": "[variables('useInternalStream')]"
    }
  }
}